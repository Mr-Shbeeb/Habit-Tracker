<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Habit Tracker Pro</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2ecc71;
            --danger: #e74c3c;
            --warning: #f39c12;
            --dark: #2c3e50;
            --light: #ecf0f1;
            --sky-blue: #87CEEB;
            --white: #ffffff;
        }
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        body {
            background-color: var(--light);
            color: var(--dark);
            line-height: 1.6;
        }
        .app-container {
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
            background-color: var(--white);
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            min-height: 100vh;
        }
        .app-header {
            background: linear-gradient(135deg, var(--primary), var(--sky-blue));
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 10px;
            margin-bottom: 20px;
            position: relative;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .app-header h1 {
            font-size: 1.8rem;
            font-weight: 600;
        }
        .stats-btn {
            position: absolute;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s;
        }
        .stats-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-50%) scale(1.1);
        }
        .progress-card {
            background: var(--white);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.08);
            text-align: center;
        }
        .progress-card h2 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        .progress-value {
            font-size: 3rem;
            font-weight: bold;
            color: var(--primary);
            margin: 10px 0;
        }
        .progress-bar {
            height: 10px;
            background-color: var(--light);
            border-radius: 5px;
            overflow: hidden;
            margin-top: 15px;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--sky-blue));
            width: 0%;
            transition: width 0.5s ease;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        .stat-card {
            background: var(--white);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 3px 10px rgba(0,0,0,0.08);
        }
        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
            color: var(--primary);
        }
        .stat-label {
            color: var(--dark);
            font-size: 0.9rem;
            opacity: 0.8;
        }
        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-top: 30px;
        }
        .btn {
            padding: 15px;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            font-weight: 600;
        }
        .btn-success {
            background: linear-gradient(135deg, var(--secondary), #27ae60);
            color: white;
        }
        .btn-danger {
            background: linear-gradient(135deg, var(--danger), #c0392b);
            color: white;
        }
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .btn:active {
            transform: translateY(0);
        }
        .btn:disabled {
            opacity: 0.7;
            transform: none !important;
            cursor: not-allowed;
        }
        /* Statistics Modal */
        .stats-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
            overflow-y: auto;
            padding: 10px;
        }
        .modal-content {
            background-color: var(--white);
            border-radius: 15px;
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        .modal-header {
            background: linear-gradient(135deg, var(--primary), var(--sky-blue));
            color: white;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .modal-header h2 {
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.8rem;
            cursor: pointer;
            line-height: 1;
        }
        .modal-body {
            padding: 15px;
        }
        .chart-container {
            height: 250px;
            width: 100%;
            margin-bottom: 15px;
            position: relative;
        }
        .summary-cards {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
        }
        .summary-card {
            background: var(--white);
            border-radius: 10px;
            padding: 12px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.08);
        }
        .summary-card h3 {
            color: var(--primary);
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 1rem;
        }
        .summary-row {
            display: flex;
            justify-content: space-between;
            padding: 6px 0;
            border-bottom: 1px solid var(--light);
            font-size: 0.9rem;
        }
        .summary-row:last-child {
            border-bottom: none;
        }
        #recentActivity {
            margin-top: 8px;
        }
        .activity-item {
            display: flex;
            justify-content: space-between;
            padding: 6px 0;
            border-bottom: 1px solid var(--light);
            font-size: 0.85rem;
        }
        .activity-item:last-child {
            border-bottom: none;
        }
        .success-activity {
            color: var(--secondary);
        }
        .fail-activity {
            color: var(--danger);
        }
        
        /* تحسينات للهاتف المحمول */
        @media (max-width: 600px) {
            .app-container {
                padding: 15px;
                max-width: 100%;
                border-radius: 0;
            }
            
            .app-header h1 {
                font-size: 1.5rem;
                padding: 0 40px;
            }
            
            .progress-value {
                font-size: 2.5rem;
            }
            
            .stat-value {
                font-size: 2rem;
            }
            
            .btn {
                padding: 12px;
                font-size: 1rem;
            }
            
            .stats-modal {
                padding: 5px;
            }
            
            .modal-content {
                border-radius: 10px;
            }
            
            .chart-container {
                height: 220px;
            }
        }
        
        @media (max-width: 400px) {
            .app-header h1 {
                font-size: 1.3rem;
            }
            
            .progress-card h2,
            .summary-card h3 {
                font-size: 0.9rem;
            }
            
            .progress-value {
                font-size: 2rem;
            }
            
            .stat-value {
                font-size: 1.8rem;
            }
            
            .stat-label {
                font-size: 0.8rem;
            }
            
            .chart-container {
                height: 200px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <header class="app-header">
            <h1><i class="fas fa-seedling"></i> Habit Tracker Pro</h1>
            <button class="stats-btn" id="statsBtn">
                <i class="fas fa-chart-line"></i>
            </button>
        </header>
        
        <main class="app-main">
            <section class="progress-card">
                <h2><i class="fas fa-trophy"></i> Current Level</h2>
                <div class="progress-value" id="currentLevel">0%</div>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
            </section>
            
            <section class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="successfulDays">0</div>
                    <div class="stat-label">Successful Days</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="currentStreak">0</div>
                    <div class="stat-label">Current Streak</div>
                </div>
            </section>
            
            <section class="action-buttons">
                <button class="btn btn-success" id="successBtn">
                    <i class="fas fa-check-circle"></i> Success Today
                </button>
                <button class="btn btn-danger" id="failureBtn">
                    <i class="fas fa-times-circle"></i> Failed Today
                </button>
            </section>
        </main>
    </div>
    
    <!-- Statistics Modal -->
    <div class="stats-modal" id="statsContainer">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-chart-pie"></i> Progress Statistics</h2>
                <button class="close-btn" id="closeStatsBtn">&times;</button>
            </div>
            
            <div class="modal-body">
                <div class="chart-container" id="progressChart"></div>
                
                <div class="summary-cards">
                    <div class="summary-card">
                        <h3><i class="fas fa-calendar-alt"></i> Journey Summary</h3>
                        <div class="summary-row">
                            <span>Start Date:</span>
                            <span id="startDate">-</span>
                        </div>
                        <div class="summary-row">
                            <span>Total Days:</span>
                            <span id="totalDays">0 days</span>
                        </div>
                        <div class="summary-row">
                            <span>Success Rate:</span>
                            <span id="successDaysStat">0%</span>
                        </div>
                        <div class="summary-row">
                            <span>Longest Streak:</span>
                            <span id="longestStreak">0 days</span>
                        </div>
                    </div>
                    
                    <div class="summary-card">
                        <h3><i class="fas fa-fire"></i> Recent Activity</h3>
                        <div id="recentActivity"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // البيانات الأساسية
            let currentLevel = 0;
            let records = [];
            let todayRecorded = false;

            // العناصر في الصفحة
            const elements = {
                currentLevel: document.getElementById('currentLevel'),
                progressFill: document.getElementById('progressFill'),
                successfulDays: document.getElementById('successfulDays'),
                currentStreak: document.getElementById('currentStreak'),
                successBtn: document.getElementById('successBtn'),
                failureBtn: document.getElementById('failureBtn'),
                statsBtn: document.getElementById('statsBtn'),
                statsContainer: document.getElementById('statsContainer'),
                closeStatsBtn: document.getElementById('closeStatsBtn'),
                startDate: document.getElementById('startDate'),
                totalDays: document.getElementById('totalDays'),
                successDaysStat: document.getElementById('successDaysStat'),
                longestStreak: document.getElementById('longestStreak'),
                progressChart: document.getElementById('progressChart'),
                recentActivity: document.getElementById('recentActivity')
            };

            // تحميل البيانات المحفوظة
            function loadData() {
                const savedLevel = localStorage.getItem('currentLevel');
                const savedRecords = localStorage.getItem('records');
                
                if (savedLevel) {
                    currentLevel = parseFloat(savedLevel);
                }
                
                if (savedRecords) {
                    records = JSON.parse(savedRecords);
                }
                
                checkTodayRecord();
                updateUI();
            }

            // حفظ البيانات
            function saveData() {
                localStorage.setItem('currentLevel', currentLevel.toString());
                localStorage.setItem('records', JSON.stringify(records));
            }

            // التحقق من تسجيل اليوم
            function checkTodayRecord() {
                const today = new Date().toISOString().split('T')[0];
                todayRecorded = records.some(record => record.date.split('T')[0] === today);
                updateButtons();
            }

            // تحديث الواجهة
            function updateUI() {
                elements.currentLevel.textContent = `${currentLevel.toFixed(1)}%`;
                elements.progressFill.style.width = `${Math.min(currentLevel, 100)}%`;
                
                const successfulDays = records.filter(r => r.success).length;
                elements.successfulDays.textContent = successfulDays;
                
                const streak = calculateCurrentStreak();
                elements.currentStreak.textContent = streak;
            }

            // تحديث حالة الأزرار
            function updateButtons() {
                elements.successBtn.disabled = todayRecorded;
                elements.failureBtn.disabled = todayRecorded;
            }

            // حساب الأيام المتتالية الحالية
            function calculateCurrentStreak() {
                if (records.length === 0) return 0;
                
                let streak = 0;
                const today = new Date();
                let currentDate = new Date(today);
                
                const sortedRecords = [...records].sort((a, b) => new Date(b.date) - new Date(a.date));
                
                for (const record of sortedRecords) {
                    const recordDate = new Date(record.date);
                    
                    if (recordDate.toDateString() === currentDate.toDateString() && record.success) {
                        streak++;
                        currentDate.setDate(currentDate.getDate() - 1);
                    } else if (recordDate < currentDate) {
                        break;
                    }
                }
                
                return streak;
            }

            // إظهار الإحصائيات
            function showStats() {
                if (records.length === 0) {
                    elements.startDate.textContent = '-';
                    elements.totalDays.textContent = '0 days';
                    elements.successDaysStat.textContent = '0%';
                    elements.longestStreak.textContent = '0 days';
                } else {
                    const sortedRecords = [...records].sort((a, b) => new Date(a.date) - new Date(b.date));
                    const startDate = new Date(sortedRecords[0].date);
                    const today = new Date();
                    const totalDays = Math.ceil((today - startDate) / (1000 * 60 * 60 * 24)) + 1;
                    const successfulDays = records.filter(r => r.success).length;
                    const successPercentage = (successfulDays / totalDays * 100).toFixed(1);
                    const longestStreak = calculateLongestStreak();
                    
                    elements.startDate.textContent = startDate.toLocaleDateString();
                    elements.totalDays.textContent = `${totalDays} days`;
                    elements.successDaysStat.textContent = `${successPercentage}%`;
                    elements.longestStreak.textContent = `${longestStreak} days`;
                }
                
                updateRecentActivity();
                updateChart();
                
                elements.statsContainer.style.display = 'block';
            }

            // تحديث النشاط الأخير
            function updateRecentActivity() {
                elements.recentActivity.innerHTML = '';
                const recentRecords = [...records].sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);
                
                recentRecords.forEach(record => {
                    const activityItem = document.createElement('div');
                    activityItem.className = `activity-item ${record.success ? 'success-activity' : 'fail-activity'}`;
                    
                    const date = new Date(record.date).toLocaleDateString();
                    const status = record.success ? 
                        '<i class="fas fa-check-circle"></i> Success' : 
                        '<i class="fas fa-times-circle"></i> Failed';
                    
                    activityItem.innerHTML = `
                        <span>${date}</span>
                        <span>${status}</span>
                    `;
                    
                    elements.recentActivity.appendChild(activityItem);
                });
            }

            // حساب أطول سلسلة نجاح
            function calculateLongestStreak() {
                let longest = 0;
                let current = 0;
                
                records.sort((a, b) => new Date(a.date) - new Date(b.date)).forEach(record => {
                    current = record.success ? current + 1 : 0;
                    if (current > longest) longest = current;
                });
                
                return longest;
            }

            // تحديث الرسم البياني باستخدام Plotly مع تحسينات للهاتف
            function updateChart() {
                try {
                    // إذا لم توجد سجلات، عرض رسالة بدلاً من المخطط
                    if (records.length === 0) {
                        elements.progressChart.innerHTML = '<p style="text-align:center; padding:20px; color:#7f8c8d;">No data available for chart</p>';
                        return;
                    }
                    
                    // تحضير البيانات
                    const dates = [];
                    const levels = [];
                    const colors = [];
                    const successStatus = [];
                    let level = 0;
                    
                    // فرز السجلات حسب التاريخ
                    const sortedRecords = [...records].sort((a, b) => new Date(a.date) - new Date(a.date));
                    
                    sortedRecords.forEach(record => {
                        const date = new Date(record.date);
                        dates.push(date);
                        
                        if (record.success) {
                            level += 0.8;
                            colors.push('#2ecc71'); // أخضر للنجاح
                            successStatus.push('Success');
                        } else {
                            level = Math.max(level - 5.0, 0);
                            colors.push('#e74c3c'); // أحمر للفشل
                            successStatus.push('Failed');
                        }
                        
                        levels.push(level);
                    });
                    
                    // تحديد حجم الخط حسب حجم الشاشة
                    const isMobile = window.innerWidth < 600;
                    const titleFontSize = isMobile ? 14 : 16;
                    const axisTitleFontSize = isMobile ? 12 : 14;
                    const tickFontSize = isMobile ? 10 : 12;
                    
                    // إنشاء المخطط باستخدام Plotly مع إعدادات للهاتف
                    const trace = {
                        x: dates,
                        y: levels,
                        mode: 'lines+markers',
                        type: 'scatter',
                        line: {
                            color: '#3498db',
                            width: 2
                        },
                        marker: {
                            color: colors,
                            size: isMobile ? 6 : 8,
                            line: {
                                width: 1,
                                color: '#fff'
                            }
                        },
                        text: successStatus,
                        hoverinfo: 'text+y',
                        hovertemplate: '%{text}<br>Level: %{y:.1f}%<extra></extra>'
                    };
                    
                    const layout = {
                        title: {
                            text: 'Level Progress Over Time',
                            font: {
                                size: titleFontSize
                            }
                        },
                        xaxis: {
                            title: {
                                text: 'Date',
                                font: {
                                    size: axisTitleFontSize
                                }
                            },
                            type: 'date',
                            tickfont: {
                                size: tickFontSize
                            }
                        },
                        yaxis: {
                            title: {
                                text: 'Level (%)',
                                font: {
                                    size: axisTitleFontSize
                                }
                            },
                            range: [0, Math.max(100, ...levels) + 10],
                            tickfont: {
                                size: tickFontSize
                            }
                        },
                        showlegend: false,
                        margin: {
                            l: 50,
                            r: 20,
                            b: 50,
                            t: 50,
                            pad: 4
                        },
                        height: isMobile ? 220 : 250,
                        responsive: true
                    };
                    
                    // إعدادات خاصة للهاتف
                    if (isMobile) {
                        layout.margin.l = 40;
                        layout.margin.b = 60;
                        layout.xaxis.title.standoff = 10;
                        layout.yaxis.title.standoff = 10;
                    }
                    
                    Plotly.newPlot(elements.progressChart, [trace], layout, {
                        responsive: true,
                        displayModeBar: true,
                        displaylogo: false,
                        modeBarButtonsToRemove: ['toImage', 'sendDataToCloud'],
                        scrollZoom: true
                    });
                    
                } catch (error) {
                    console.error("Error in updateChart:", error);
                    // عرض رسالة خطأ في واجهة المستخدم
                    elements.progressChart.innerHTML = '<p style="color:#e74c3c; text-align:center; padding:20px;">Failed to load chart. Please try again.</p>';
                }
            }

            // معالجة النجاح
            function handleSuccess() {
                if (todayRecorded) {
                    alert("You've already recorded your progress today!");
                    return;
                }
                
                currentLevel += 0.8;
                const today = new Date().toISOString();
                records.push({ date: today, success: true });
                todayRecorded = true;
                
                updateButtons();
                saveData();
                updateUI();
            }

            // معالجة الفشل
            function handleFailure() {
                if (todayRecorded) {
                    alert("You've already recorded your progress today!");
                    return;
                }
                
                currentLevel = Math.max(currentLevel - 5.0, 0);
                const today = new Date().toISOString();
                records.push({ date: today, success: false });
                todayRecorded = true;
                
                updateButtons();
                saveData();
                updateUI();
            }

            // إعداد الأحداث
            function setupEventListeners() {
                elements.successBtn.addEventListener('click', handleSuccess);
                elements.failureBtn.addEventListener('click', handleFailure);
                elements.statsBtn.addEventListener('click', showStats);
                elements.closeStatsBtn.addEventListener('click', () => {
                    elements.statsContainer.style.display = 'none';
                });
                
                // إعادة رسم المخطط عند تغيير حجم النافذة
                window.addEventListener('resize', function() {
                    if (elements.statsContainer.style.display === 'block') {
                        updateChart();
                    }
                });
            }

            // إعادة تعيين اليوم عند منتصف الليل
            function resetDailyRecord() {
                const now = new Date();
                const midnight = new Date();
                midnight.setHours(24, 0, 0, 0);
                
                const timeUntilMidnight = midnight - now;
                
                if (timeUntilMidnight > 0) {
                    setTimeout(() => {
                        todayRecorded = false;
                        updateButtons();
                        resetDailyRecord();
                    }, timeUntilMidnight);
                }
            }

            // بدء التطبيق
            loadData();
            setupEventListeners();
            resetDailyRecord();
        });
    </script>
</body>
</html>
